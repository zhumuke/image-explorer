{"version":3,"sources":["webpack://image-explorer/./src/extension.ts","webpack://image-explorer/external \"fs\"","webpack://image-explorer/external \"path\"","webpack://image-explorer/external \"vscode\"","webpack://image-explorer/webpack/bootstrap","webpack://image-explorer/webpack/startup"],"names":["focusDir","getImgOfDir","folder","files","name","type","vscode","workspace","fs","readDirectory","FileType","File","filePath","posix","join","path","push","Uri","parse","with","scheme","toString","error","getImageElementHTML","workSpaceDirName","cssTpl","jsTpl","Object","keys","map","dir","split","file","pathOfImg","replace","getTotalNumberOfImages","values","reduce","total","item","length","context","console","log","getConfiguration","directoryName","template","cssUrl","jsxImport","rootDir","rootDirectory","allDirs","allPath","workspaceFolders","workSpaceUri","uri","commands","executeCommand","ps","disposableImg","registerCommand","url","window","showInformationMessage","index","ds","dirName","indexOf","update","panel","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","imgText","webviewHtml","templatePath","resourcePath","extensionPath","dirPath","dirname","html","readFileSync","m","$1","$2","resolve","handleWebViewContent","webview","onDidReceiveMessage","message","command","get","dirsImagesMap","newImagePath","rootDirUri","joinPath","scanResult","imgDirs","dirs","result","pop","subPath","some","d","endsWith","Directory","scanImgDirs","forEach","imgElementStr","undefined","subscriptions","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { posix } from \"path\";\nimport { allowedNodeEnvironmentFlags } from \"node:process\";\nlet focusDir = \"\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('\"imageExplorer\" 激活');\n\n  const dir: [] =\n    vscode.workspace.getConfiguration(\"imageExplorer\").directoryName || [];\n\n  const cssTpl: string =\n    vscode.workspace.getConfiguration(\"imageExplorer\").template.cssUrl || \"\";\n\n  const jsTpl: string =\n    vscode.workspace.getConfiguration(\"imageExplorer\").template.jsxImport || \"\";\n\n  const rootDir: string =\n    vscode.workspace.getConfiguration(\"imageExplorer\").rootDirectory || \"src\";\n\n  const allDirs: string[] =\n    vscode.workspace.getConfiguration(\"imageExplorer\").allPath || [];\n\n  const workSpaceDirName = vscode.workspace.workspaceFolders\n    ? vscode.workspace.workspaceFolders[0].name\n    : \"\";\n\n  const workSpaceUri = vscode.workspace.workspaceFolders\n    ? vscode.workspace.workspaceFolders[0].uri\n    : null;\n\n  // 设置有右键菜单的目录,用于插件package.json中的when语句\n  vscode.commands.executeCommand(\n    \"setContext\",\n    \"ext.imageExplorer.supportedFolders\",\n    allDirs.map((item) => {\n      const ps = item.split(\"/\");\n      return ps[ps.length - 1];\n    })\n  );\n\n  let disposableImg = vscode.commands.registerCommand(\n    \"imageExplorer.showImageExplorer\",\n    async (url) => {\n      if (!workSpaceUri) {\n        vscode.window.showInformationMessage(\"no workspace, choose one!\");\n        return;\n      }\n      let files = {};\n\n      if (allDirs) {\n        for (let index = 0; index < allDirs.length; index++) {\n          const dir = allDirs[index];\n          // const t = vscode.Uri.joinPath(workSpaceUri, dir);\n          const ds = await getImgOfDir(vscode.Uri.parse(dir));\n          if (ds.length > 0) {\n            files = { ...files, [dir]: ds };\n          }\n        }\n      }\n\n      // 右键点击某个图片目录，点击菜单命令方式进入\n      if (url) {\n        const dirName = url.path.split(workSpaceDirName)[1];\n        focusDir = dirName;\n        // 如果没有则加入到所有图片路径中\n        if (allDirs && allDirs.indexOf(dirName) === -1) {\n          const ds = await getImgOfDir(url);\n          files = { ...files, [dirName]: ds };\n          vscode.workspace\n            .getConfiguration()\n            .update(\"imageExplorer.allPath\", [dirName, ...allDirs]);\n        }\n      }\n\n      // 创建webview\n      const panel = vscode.window.createWebviewPanel(\n        \"feResourceWebView\", // viewType\n        \"静态资源视图\", // 视图标题\n        vscode.ViewColumn.One, // 显示在编辑器的哪个部位\n        {\n          enableScripts: true, // 启用JS，默认禁用\n          retainContextWhenHidden: true, // webview被隐藏时保持状态，避免被重置\n        }\n      );\n\n      const imgText: string = getImageElementHTML(\n        files,\n        workSpaceDirName,\n        cssTpl,\n        jsTpl\n      );\n\n      const webviewHtml = handleWebViewContent(context, \"./index.html\");\n      panel.webview.html = webviewHtml\n        .replace(\"${images}\", imgText)\n        .replace(\"${total}\", getTotalNumberOfImages(files));\n\n      // 响应webview的刷新图片的命令\n      panel.webview.onDidReceiveMessage(\n        async (message) => {\n          if (message.command === \"scanProjectImages\") {\n            const allDirs: string[] =\n              vscode.workspace\n                .getConfiguration()\n                .get(\"imageExplorer.allPath\") || [];\n            let dirsImagesMap = {};\n            let newImagePath: string[] = []; // 过滤掉不包含图片的目录，更新配置属性\n            // 配置中的路径\n            if (allDirs) {\n              for (let index = 0; index < allDirs.length; index++) {\n                const dir = allDirs[index];\n                // const t = vscode.Uri.joinPath(workSpaceUri, dir);\n                const ds = await getImgOfDir(vscode.Uri.parse(dir));\n                if (ds.length > 0) {\n                  newImagePath.push(dir);\n                  dirsImagesMap = { ...dirsImagesMap, [dir]: ds };\n                }\n              }\n            }\n\n            const rootDirUri = vscode.Uri.joinPath(workSpaceUri, rootDir);\n            // 合新一次扫描的结果\n            const scanResult = await scanImgDirs(rootDirUri, dir);\n            const scanPath = Object.keys(scanResult);\n            scanPath.forEach((path) => {\n              if (newImagePath.indexOf(path) === -1) {\n                newImagePath.push(path);\n              }\n            });\n            // 合并后的结果更新到配置中\n            vscode.workspace\n              .getConfiguration()\n              .update(\"imageExplorer.allPath\", newImagePath);\n\n            // 更新有右键菜单的目录\n            vscode.commands.executeCommand(\n              \"setContext\",\n              \"ext.imageExplorer.supportedFolders\",\n              newImagePath.map((item) => {\n                const ps = item.split(\"/\");\n                return ps[ps.length - 1];\n              })\n            );\n\n            dirsImagesMap = { ...dirsImagesMap, ...scanResult };\n            const imgElementStr = getImageElementHTML(\n              dirsImagesMap,\n              workSpaceDirName,\n              cssTpl,\n              jsTpl\n            );\n            panel.webview.html = webviewHtml\n              .replace(\"${images}\", imgElementStr)\n              .replace(\"${total}\", getTotalNumberOfImages(dirsImagesMap));\n            // panel.webview.postMessage({ command: 'scan finished' });\n          }\n        },\n        undefined,\n        context.subscriptions\n      );\n    }\n  );\n\n  context.subscriptions.push(disposableImg);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n\n//返回所有的图片文件路径\nasync function getImgOfDir(folder: vscode.Uri): Promise<string[]> {\n  const files = [];\n  try {\n    for (const [name, type] of await vscode.workspace.fs.readDirectory(\n      folder\n    )) {\n      if (type === vscode.FileType.File) {\n        const filePath = posix.join(folder.path, name);\n        files.push(\n          vscode.Uri.parse(filePath)\n            .with({ scheme: \"vscode-resource\" })\n            .toString()\n        );\n      }\n    }\n  } catch (error) {\n    // 目录不存在\n    return [];\n  }\n  return files;\n}\n\n// 扫描一个目录下的图片\nasync function scanImgDirs(rootDir: vscode.Uri, imgDirs = [\"images\"]) {\n  const dirs = [rootDir];\n  let result = {};\n\n  while (dirs.length > 0) {\n    const dir = dirs.pop();\n    const files = [];\n    if (dir) {\n      for (const [name, type] of await vscode.workspace.fs.readDirectory(dir)) {\n        const subPath = vscode.Uri.parse(posix.join(dir.path, name));\n        if (type === vscode.FileType.File) {\n          const isImg = [\".jpg\", \".png\", \".jpeg\"].some((d) => name.endsWith(d));\n          if (isImg) {\n            files.push(subPath.with({ scheme: \"vscode-resource\" }).toString());\n          }\n        } else if (type === vscode.FileType.Directory) {\n          const isImgDir = imgDirs.indexOf(name) > -1;\n          dirs.push(subPath);\n        }\n      }\n      if (files.length > 0) {\n        result = { ...result, [dir.path]: files };\n      }\n    }\n  }\n  return result;\n}\n\nfunction getImageElementHTML(\n  files: { [key: string]: string[] },\n  workSpaceDirName: string,\n  cssTpl: string,\n  jsTpl: string\n) {\n  const dirs = Object.keys(files);\n  return `${dirs.map(\n    (dir) =>\n      `<div class=\"${\n        dir.split(workSpaceDirName)[1] === focusDir ? \"dir focus-dir\" : \"dir\"\n      }\">\n        <span class='dir-img'></span>\n        ${dir.split(workSpaceDirName)[1]}\n      </div>\n      <div class=\"img-list\">\n      ${files[dir].map((file: string) => {\n        const pathOfImg = file.split(workSpaceDirName)[1];\n        return `<div class=\"img-item\">\n            <div class=\"img-wrapper\" style='background-image: url(\"${file}\")'></div>\n            <button class='btn' data-clipboard-text=\"${cssTpl?.replace(\n              \"$pathOfImage\",\n              pathOfImg\n            )}\">css</button>\n            <button class='btn' data-clipboard-text=\"${jsTpl?.replace(\n              \"$pathOfImage\",\n              pathOfImg\n            )}\">jsx</button>\n          </div>`;\n      })}\n      </div>`\n  )}`;\n}\n\n// 处理webview的html文件中的连接\nfunction handleWebViewContent(context: any, templatePath: string) {\n  const resourcePath = path.join(context.extensionPath, templatePath);\n  const dirPath = path.dirname(resourcePath);\n  let html = fs.readFileSync(resourcePath, \"utf-8\");\n  // vscode不支持直接加载本地资源，需要替换成其专有路径格式，样式\\JS\\背景图的路径替换\n  html = html.replace(\n    /(<link.+?href=\"|<script.+?src=\"|<img.+?src=\"|url\\(\")(.+?)\"/g,\n    (m: string, $1: string, $2: string) => {\n      return (\n        $1 +\n        vscode.Uri.file(path.resolve(dirPath, $2))\n          .with({ scheme: \"vscode-resource\" })\n          .toString() +\n        '\"'\n      );\n    }\n  );\n  return html;\n}\n\nfunction getTotalNumberOfImages(file: { [key: string]: string[] }): string {\n  const arrs = Object.values(file);\n  return (\n    arrs.reduce((total, item) => {\n      return total + item.length;\n    }, 0) + \"\"\n  );\n}\n","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"sourceRoot":""}